import React, { useContext, useState } from 'react'
import styled from 'styled-components'
import Color from '../../../const/color'
import { Form, Field } from 'react-final-form'
import SearchToggle from '../../../components/molecules/search-toggle'
import FormField from '../../../components/molecules/form-field'
import { InputText, InputDate, Select } from '../../../components/atoms/form'
import { SearchCheckbox } from '../../../components/atoms/search-checkbox'
import { Button } from '../../../components/atoms/button'
import { Icon } from '../../../components/atoms/icon'
import { IconButton } from '../../../components/atoms/icon-button'
import { useRouter } from 'next/router'
import { useVulnerabilitySearchItem } from '../../../hooks/pages/vulnerability/use-vulnerability'
import GlobalContext from '../../../store/context'

type Props = {
  data?: []
  setData?: any
  searchRef?: any
  setReset?: any
  handleClick?(e: React.MouseEvent<HTMLElement>): void
}

const defaultSelect = {
  value: '',
  label: 'すべて',
}

const VulnerabilitySearch: React.FC<Props> = (props) => {
  const router = useRouter()
  const [selectDefaultData, setSelectDefaultData] = useState<any>(defaultSelect)
  const [minDate, setMinDate] = useState<any>()
  const {
    projectList,
    serverList,
    userList,
    setTarget,
    setServerRequestTrigger,
  } = useVulnerabilitySearchItem()
  const { state } = useContext(GlobalContext)

  const [userListData, setUserListData] = useState<any>(defaultSelect)

  const handleUserChange = (e) => {
    const userId = Number(e.target.value)

    if (userId) {
      router.push({
        query: { ...router.query, assignee_id: userId },
      })
    } else {
      delete router.query.assignee_id
      router.push({
        query: { ...router.query },
      })
    }
  }

  const handleUserSet = () => {
    setUserListData({
      label: state.user.name,
      value: state.user.id,
      image: state.user.profile_image,
    })
    router.push({
      query: { ...router.query, assignee_id: state.user.id },
    })
  }

  const handleStatusChange = (formState: any) => {
    const { status } = formState.values
    router.push({
      query: { ...router.query, 'status[]': status },
    })
  }

  const handleSeverityChange = (formState: any) => {
    const { severity } = formState.values
    router.push({
      query: { ...router.query, 'severity_id[]': severity },
    })
  }

  const toDoubleDigits = (num) => {
    num += ''
    if (num.length === 1) {
      num = '0' + num
    }
    return num
  }

  const handleStartDateChange = (formValues: any) => {
    const { createStartDate } = formValues.values
    const year = createStartDate.getFullYear()
    const month = toDoubleDigits(createStartDate.getMonth() + 1)
    const day = toDoubleDigits(createStartDate.getDate())
    setMinDate(createStartDate)

    router.push({
      query: { ...router.query, create_date_start: `${year}-${month}-${day}` },
    })
  }

  const handleEndDateChange = (formValues: any) => {
    const { createEndDate } = formValues.values
    const year = createEndDate.getFullYear()
    const month = toDoubleDigits(createEndDate.getMonth() + 1)
    const day = toDoubleDigits(createEndDate.getDate())

    router.push({
      query: { ...router.query, create_date_end: `${year}-${month}-${day}` },
    })
  }

  const handleProjectChange = (e) => {
    const projectId = Number(e.target.value)

    if (projectId) {
      router.push({
        query: { ...router.query, project_id: projectId },
      })

      setTarget(projectId)
      setServerRequestTrigger(true)
    } else {
      delete router.query.project_id
      router.push({
        query: { ...router.query },
      })
    }
  }

  const handleServerChange = (e) => {
    const serverId = Number(e.target.value)

    if (serverId) {
      router.push({
        query: { ...router.query, server_id: serverId },
      })
    } else {
      delete router.query.server_id
      router.push({
        query: { ...router.query },
      })
    }
  }

  let timer = null

  const handleKeywordChange = (formValues: any) => {
    const { keyword } = formValues.values

    clearTimeout(timer)
    timer = setTimeout(() => {
      if (!keyword) {
        delete router.query.keyword
        router.push({
          pathname: '/vulnerability',
          query: { ...router.query },
        })
      } else {
        router.push({
          pathname: '/vulnerability',
          query: { ...router.query, keyword: keyword },
        })
      }
    }, 2000)
  }

  const handleClear = () => {
    if (!Object.keys(router.query).length) return

    router.push({
      pathname: '/vulnerability',
    })

    setSelectDefaultData({ label: 'すべて', value: '' })
    setUserListData({ label: 'すべて', value: '' })
    props.setReset(true)
  }

  return (
    <Wrap ref={props.searchRef}>
      <SearchToggle
        height={300}
        handleClick={props.handleClick}
        form={
          <Form
            onSubmit={handleStatusChange}
            render={({ handleSubmit, form }) => (
              <form onSubmit={handleSubmit}>
                <FormWrap>
                  <FormWrapRow>
                    <InputWrap>
                      <StyledFormField label={'担当者'}>
                        <Select
                          data={userList}
                          defaultData={userListData}
                          handleClick={handleUserChange}
                        />
                      </StyledFormField>
                      <IconButton handleClick={handleUserSet}>
                        <Icon.User />
                      </IconButton>
                    </InputWrap>

                    <InputWrap>
                      <FormField label={'対応状況'}>
                        <Field name={'status'} type={'checkbox'} value={1}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              icon={<Icon.StatusBacklog />}
                              onChange={(e) => {
                                input.onChange(e)
                                handleStatusChange(form.getState())
                              }}
                            >
                              未対応
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'status'} type={'checkbox'} value={2}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              icon={<Icon.StatusProgress />}
                              onChange={(e) => {
                                input.onChange(e)
                                handleStatusChange(form.getState())
                              }}
                            >
                              対応中
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'status'} type={'checkbox'} value={9}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              icon={<Icon.StatusDone />}
                              onChange={(e) => {
                                input.onChange(e)
                                handleStatusChange(form.getState())
                              }}
                            >
                              対応済み
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'status'} type={'checkbox'} value={3}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              icon={<Icon.StatusClosed />}
                              onChange={(e) => {
                                input.onChange(e)
                                handleStatusChange(form.getState())
                              }}
                            >
                              対応なし
                            </SearchCheckbox>
                          )}
                        </Field>
                      </FormField>
                    </InputWrap>
                  </FormWrapRow>

                  <FormWrapRow>
                    <InputWrap>
                      <FormField label={'深刻度'}>
                        <Field name={'severity'} type={'checkbox'} value={5}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleSeverityChange(form.getState())
                              }}
                              color={Color.SEVERITY.CRITICAL}
                            >
                              緊急
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'severity'} type={'checkbox'} value={4}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleSeverityChange(form.getState())
                              }}
                              color={Color.SEVERITY.HIGH}
                            >
                              重要
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'severity'} type={'checkbox'} value={3}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleSeverityChange(form.getState())
                              }}
                              color={Color.SEVERITY.MEDIUM}
                            >
                              警告
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'severity'} type={'checkbox'} value={2}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleSeverityChange(form.getState())
                              }}
                              color={Color.SEVERITY.LOW}
                            >
                              注意
                            </SearchCheckbox>
                          )}
                        </Field>
                        <Field name={'severity'} type={'checkbox'} value={1}>
                          {({ input, meta }) => (
                            <SearchCheckbox
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleSeverityChange(form.getState())
                              }}
                              color={Color.SEVERITY.INFO}
                            >
                              情報
                            </SearchCheckbox>
                          )}
                        </Field>
                      </FormField>
                    </InputWrap>

                    <InputWrap>
                      <FormField label={'検出日'}>
                        <Field name={'createStartDate'} type={'text'} value={1}>
                          {({ input, meta }) => (
                            <InputDate
                              {...input}
                              onChange={(e) => {
                                input.onChange(e)
                                handleStartDateChange(form.getState())
                              }}
                            />
                          )}
                        </Field>
                        〜&nbsp;&nbsp;
                        <Field name={'createEndDate'} type={'text'} value={1}>
                          {({ input, meta }) => (
                            <InputDate
                              {...input}
                              minDate={minDate}
                              onChange={(e) => {
                                input.onChange(e)
                                handleEndDateChange(form.getState())
                              }}
                            />
                          )}
                        </Field>
                      </FormField>
                    </InputWrap>
                  </FormWrapRow>

                  <FormWrapRow>
                    <InputWrap>
                      <FormField label={'プロジェクト'}>
                        <Select
                          data={projectList}
                          defaultData={selectDefaultData}
                          handleClick={handleProjectChange}
                        />
                      </FormField>
                    </InputWrap>

                    <InputWrap>
                      <FormField label={'サーバー'}>
                        <Select
                          data={serverList}
                          defaultData={selectDefaultData}
                          handleClick={handleServerChange}
                        />
                      </FormField>
                    </InputWrap>

                    <InputWrap>
                      <Field name={'keyword'} type={'text'} value={1}>
                        {({ input, meta }) => (
                          <FormField label={'キーワード'}>
                            <InputText
                              {...(input as any)}
                              size={'L'}
                              onKeyUp={(e) => {
                                input.onChange(e)
                                handleKeywordChange(form.getState())
                              }}
                            />
                          </FormField>
                        )}
                      </Field>
                    </InputWrap>

                    <InputWrap>
                      <Button
                        type={'button'}
                        label={'絞り込みをリセット'}
                        small={true}
                        buttonType={'secondary'}
                        handleClick={() => {
                          form.reset()
                          handleClear()
                        }}
                      />
                    </InputWrap>
                  </FormWrapRow>
                </FormWrap>
              </form>
            )}
          />
        }
      />
    </Wrap>
  )
}

const Wrap = styled.div`
  min-width: 1056px;
  margin-top: -60px;
`
const FormWrap = styled.div`
  width: 100%;
  padding-top: 8px;
`
const FormWrapRow = styled.div`
  display: flex;
  text-align: left;
  margin-bottom: 24px;
`
const InputWrap = styled.div`
  display: flex;
  align-items: flex-end;
  margin: 0 32px 0 0;
`
const StyledFormField = styled(FormField)`
  margin-right: 8px;
`

export default VulnerabilitySearch
