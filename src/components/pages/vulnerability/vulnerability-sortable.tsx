import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import Color from '../../../const/color'
import { useRouter } from 'next/router'
import { Checkbox, Select } from '../../../components/atoms/form'
import { Sort } from '../../../components/atoms/sort'
import { Icon } from '../../../components/atoms/icon'
import { Button } from '../../../components/atoms/button'
import {
  useVulnerabilityBulkChange,
  useVulnerabilityRead,
  useVulnerabilitySearchItem,
} from '../../../hooks/pages/vulnerability/use-vulnerability'

type Props = {
  data?: any
  defaultValue?: []
  setData?: any
  reset?: boolean
  setReset?: any
  listBulkChangeShow?: boolean
  setListBulkChangeShow?: any
  isAssignee?: boolean
  setIsAssignee?: any
  assignUserList?: any
  setAssignUserList?: any
  setProjectId?: any
  setMemberListTrigger: any
}

const statusData = [
  {
    label: '対応状態を変更',
    value: '',
  },
  {
    label: '未対応',
    value: 1,
    icon: <Icon.StatusBacklog />,
  },
  {
    label: '対応中',
    value: 2,
    icon: <Icon.StatusProgress />,
  },
  {
    label: '対応済み',
    value: 9,
    icon: <Icon.StatusDone />,
  },
  {
    label: '対応なし',
    value: 3,
    icon: <Icon.StatusClosed />,
  },
]

const assigneeDefaultData = {
  label: '担当者を変更',
  value: '',
}

const statusDefaultData = {
  label: '対応状態を変更',
  value: '',
}

const VulnerabilitySortable: React.FC<Props> = (props) => {
  const router = useRouter()
  const [sortSeverity, setSortSeverity] = useState<number>(0)
  const [sortProject, setSortProject] = useState<number>(0)
  const [sortDate, setSortDate] = useState<number>(0)
  const [sortStatus, setSortStatus] = useState<number>(0)
  const [isBulkChange, setIsBulkChange] = useState<boolean>(true)
  const [bulkChangeItem, setBulkChangeItem] = useState<any>([])
  const [assigneeSetData, setAssigneeSetData] =
    useState<any>(assigneeDefaultData)
  const [statusSetData, setStatusSetData] = useState<any>(statusDefaultData)
  const { setReadItem, setTrigger } = useVulnerabilityRead()
  const { setBulkItem, setBulkChangeTrigger } = useVulnerabilityBulkChange()

  const handleClickSort = (name: string, sort: number) => {
    if (sort === 0) {
      delete router.query.sort
      delete router.query.direction
      router.push({
        query: { ...router.query },
      })
    } else if (sort === 1) {
      router.push({
        query: { ...router.query, sort: name, direction: 'asc' },
      })
    } else if (sort === 2) {
      router.push({
        query: { ...router.query, sort: name, direction: 'desc' },
      })
    }
  }

  const handleClickBulkCheck = () => {
    const data = props.data.map((data) => {
      return {
        ...data,
        flag: !props.listBulkChangeShow,
      }
    })

    if (!props.listBulkChangeShow) {
      const projectIdList = props.data.map((data) => {
        return data.server.project_id
      })

      const total = projectIdList.reduce(function (sum, element) {
        return sum + element
      }, 0)

      if (total / props.data.length === props.data[0].server.project_id) {
        props.setProjectId(props.data[0].server.project_id)
        props.setMemberListTrigger(true)
        props.setIsAssignee(false)
      } else {
        props.setAssignUserList([])
        props.setIsAssignee(true)
      }
    }

    props.setData(data)
    props.setListBulkChangeShow(!props.listBulkChangeShow)
  }

  const handleClickRead = () => {
    const data = props.data.filter((data) => {
      return data.flag && data.unread === true
    })

    const readData = data.map((data) => {
      return data.id
    })

    const readItems = props.data.map((data) => {
      if (readData.indexOf(data.id) !== -1) {
        return {
          ...data,
          unread: false,
        }
      } else {
        return {
          ...data,
        }
      }
    })

    props.setData(readItems)
    setReadItem({ ids: readData })
    setTrigger(true)
  }

  const handleAssigneeChange = (e) => {
    const assignId = Number(e.target.value)
    const assignee = props.assignUserList.filter((data) => {
      return assignId === data.value
    })

    if (assignId) {
      setBulkChangeItem({
        ...bulkChangeItem,
        assignee: {
          id: assignee[0].value,
          name: assignee[0].label,
          image: assignee[0].image,
        },
      })
      setIsBulkChange(false)
    } else {
      delete bulkChangeItem['assignee']
      if (bulkChangeItem['status']) {
        setIsBulkChange(false)
      } else {
        setIsBulkChange(true)
      }
    }
  }

  const handleStatusChange = (e) => {
    const status = Number(e.target.value)
    const statusCurrent = statusData.filter((data) => {
      return status === data.value
    })

    if (status) {
      setBulkChangeItem({
        ...bulkChangeItem,
        status: {
          id: statusCurrent[0].value,
          label: statusCurrent[0].label,
        },
      })
      setIsBulkChange(false)
    } else {
      delete bulkChangeItem['status']
      if (bulkChangeItem['assignee']) {
        setIsBulkChange(false)
      } else {
        setIsBulkChange(true)
      }
    }
  }

  const handleBulkChange = () => {
    const data = props.data.filter((data) => {
      return data.flag === true
    })

    const issueId = data.map((data) => {
      return data.id
    })

    const vulnerabilityChangedList = props.data.map((data) => {
      if (issueId.indexOf(data.id) !== -1) {
        if (bulkChangeItem.assignee && bulkChangeItem.status) {
          return {
            ...data,
            assignee: {
              id: bulkChangeItem.assignee.id,
              name: bulkChangeItem.assignee.name,
              profile_image: bulkChangeItem.assignee.image,
            },
            status: bulkChangeItem.status.id,
            status_name: bulkChangeItem.status.label,
          }
        } else if (bulkChangeItem.assignee) {
          return {
            ...data,
            assignee: {
              id: bulkChangeItem.assignee.id,
              name: bulkChangeItem.assignee.name,
              profile_image: bulkChangeItem.assignee.image,
            },
          }
        } else if (bulkChangeItem.status) {
          return {
            ...data,
            status: bulkChangeItem.status.id,
            status_name: bulkChangeItem.status.label,
          }
        }
      } else {
        return {
          ...data,
        }
      }
    })

    props.setData(vulnerabilityChangedList)
    setBulkItem({
      ids: issueId,
      status: bulkChangeItem.status ? bulkChangeItem.status.id : null,
      assignee_id: bulkChangeItem.assignee ? bulkChangeItem.assignee.id : null,
    })
    setBulkChangeTrigger(true)
  }

  useEffect(() => {
    if (!props.reset) return
    setSortProject(0)
    setSortDate(0)
    setSortStatus(0)
    setSortSeverity(0)
    props.setReset(false)
  }, [props.reset])

  return (
    <Wrap>
      <div>
        <Checkbox
          labelName={''}
          checked={props.listBulkChangeShow}
          onChange={handleClickBulkCheck}
        />
      </div>
      <Sort
        sort={sortSeverity}
        handleClick={() => {
          handleClickSort('cvss_base_score', (sortSeverity + 1) % 3)
          setSortProject(0)
          setSortDate(0)
          setSortStatus(0)
          setSortSeverity((sortSeverity + 1) % 3)
        }}
      >
        深刻度
      </Sort>
      <SortLabel>種別</SortLabel>
      <SortLabel>脆弱性番号</SortLabel>
      <SortLabel>概要</SortLabel>
      <Sort
        sort={sortProject}
        handleClick={() => {
          handleClickSort('project_name', (sortProject + 1) % 3)
          setSortSeverity(0)
          setSortDate(0)
          setSortStatus(0)
          setSortProject((sortProject + 1) % 3)
        }}
      >
        資産
      </Sort>
      <Sort
        sort={sortDate}
        handleClick={() => {
          handleClickSort('created_at', (sortDate + 1) % 3)
          setSortSeverity(0)
          setSortProject(0)
          setSortStatus(0)
          setSortDate((sortDate + 1) % 3)
        }}
      >
        検出日
      </Sort>
      <SortLabel>担当者</SortLabel>
      <Sort
        sort={sortStatus}
        handleClick={() => {
          handleClickSort('status', (sortStatus + 1) % 3)
          setSortSeverity(0)
          setSortProject(0)
          setSortDate(0)
          setSortStatus((sortStatus + 1) % 3)
        }}
      >
        対応状態
      </Sort>
      <Bulk isShow={props.listBulkChangeShow}>
        <BulkTitle>一括操作：</BulkTitle>
        <ButtonWrap>
          <Button
            label={'既読'}
            buttonType={'secondary'}
            small
            beforeIcon={<Icon.Check />}
            handleClick={handleClickRead}
          />
        </ButtonWrap>
        <StatusChangeForm>
          <StatusChange>
            <StatusChangeItem>
              <Select
                data={props.assignUserList}
                defaultData={assigneeSetData}
                handleClick={handleAssigneeChange}
                disabled={props.isAssignee}
              />
            </StatusChangeItem>
            <StatusChangeItem>
              <Select
                data={statusData}
                defaultData={statusSetData}
                handleClick={handleStatusChange}
              />
            </StatusChangeItem>
          </StatusChange>
          <Button
            label={'保存'}
            buttonType={'primary'}
            small
            disabled={isBulkChange}
            handleClick={handleBulkChange}
          />
        </StatusChangeForm>
      </Bulk>
    </Wrap>
  )
}

const Wrap = styled.div`
  position: relative;
  display: grid;
  grid-template-columns:
    40px 72px 48px 128px minmax(262px, 1fr) 130px minmax(96px, 145px)
    136px 96px;
  padding: 16px 32px 16px 16px;

  > * {
    display: flex;
    align-items: center;
    margin-right: 16px;
  }
`
const SortLabel = styled.div`
  font-size: 12px;
  color: ${Color.TEXT.LIGHT_GRAY};
  user-select: none;
`
const Bulk = styled.div<{ isShow: boolean }>`
  display: ${({ isShow }) => (isShow ? 'flex' : 'none')};
  align-items: center;
  position: absolute;
  top: 0;
  left: 56px;
  width: calc(100% - 24px);
  height: 56px;
  background: ${Color.COMPONENT.BACKGROUND};
  user-select: none;
`
const BulkTitle = styled.div`
  font-size: 14px;
  color: ${Color.TEXT.GRAY};
`
const ButtonWrap = styled.div`
  margin-left: 8px;
`
const StatusChangeForm = styled.div`
  display: flex;
  align-items: center;
`
const StatusChange = styled.div`
  display: flex;
  height: 40px;
  margin-left: 24px;
  padding-left: 24px;
  border-left: 1px solid ${Color.COMPONENT.BORDER};

  > div {
    margin-right: 8px;
  }
`
const StatusChangeItem = styled.div``

export default VulnerabilitySortable
