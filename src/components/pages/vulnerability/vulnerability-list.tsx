import React, { createRef, useEffect, useRef, useState } from 'react'
import { useRouter } from 'next/router'
import ReactPaginate from 'react-paginate'
import styled from 'styled-components'
import Color from '../../../const/color'
import { Icon } from '../../../components/atoms/icon'
import { IconImage } from '../../../components/atoms/icon-image'
import { Checkbox, Select } from '../../../components/atoms/form'
import { List, ListItem } from '../../../components/molecules/list'
import { LabelSeverity } from '../../../components/atoms/label'
import { LoadingIcon } from '../../../components/atoms/loading-icon'
import { NextPage } from 'next'
import { useVulnerabilityRead } from '../../../hooks/pages/vulnerability/use-vulnerability'

type Props = {
  data: any[]
  setData: any
  searchRef?: any
  searchHeight?: number
  isLoading?: boolean
  setIsLoading: any
  totalCount?: number
  setListBulkChangeShow?: any
}

const perPageSelectData = [
  {
    value: '10',
    label: '10件',
  },
  {
    value: '20',
    label: '20件',
  },
  {
    value: '50',
    label: '50件',
  },
  {
    value: '100',
    label: '100件',
  },
]

const VulnerabilityList: NextPage<Props> = (props) => {
  const router = useRouter()
  const query = router.query
  const [offset, setOffset] = useState<number>(0)
  const [perPage, setPerPage] = useState<number>(10)
  const [currentPage, setCurrentPage] = useState<number>(0)
  const [pageCount, setPageCount] = useState<number>(props.totalCount)
  const [initialSelect, setInitialSelect] = useState<any>(perPageSelectData[0])
  const [items, setItems] = useState([])

  const initialData = perPageSelectData.filter((data) => {
    return Number(data.value) === Number(query.limit)
  })

  const handlePageChange = (e) => {
    const pageNumber = e.selected
    router.push({
      query: { ...router.query, offset: pageNumber * perPage },
    })
    setOffset(pageNumber * perPage)
  }

  const handleChangePerPage = (e) => {
    const perPage = Number(e.target.value)
    router.push({
      query: { ...router.query, limit: perPage },
    })
    setCurrentPage(Math.ceil(offset / perPage))
    setPerPage(perPage)
  }

  const handleCheck = (target: any, id: number) => {
    const flagItems = items.map((data) => {
      if (data.id === id) {
        return {
          ...data,
          flag: target.checked,
        }
      } else {
        return {
          ...data,
        }
      }
    })

    const flagCheck = (data) => data.flag === true

    props.setListBulkChangeShow(flagItems.some(flagCheck))
    props.setData(flagItems)
  }

  useEffect(() => {
    setItems(props.data)
    setPageCount(Math.ceil(props.totalCount / perPage))
  }, [offset, perPage, props.data, props.totalCount])

  useEffect(() => {
    if (query.offset) {
      setOffset(Number(query.offset))
      setCurrentPage(Math.ceil(offset / perPage))
    } else {
      setOffset(0)
      setCurrentPage(0)
    }

    if (!query.limit) {
      setPerPage(10)
      setInitialSelect(perPageSelectData[0])
    }
  }, [query])

  useEffect(() => {
    if (!initialData.length) {
    } else {
      setPerPage(Number(initialData[0].value))
      setInitialSelect(initialData[0])
    }
  }, [initialData])

  return (
    <Wrap>
      <StyledList height={props.searchHeight}>
        {props.isLoading ? (
          <>
            {items.length ? (
              <>
                {items.map((data, i) => (
                  <StyledListItem key={i} size={72}>
                    {data.unread && <Unread />}
                    <DataCheckbox>
                      <Checkbox
                        labelName={''}
                        checked={data.flag}
                        onChange={(e) => {
                          handleCheck(e.target, data.id)
                        }}
                      />
                    </DataCheckbox>
                    <DataListItem
                      onClick={() => {
                        router.push({
                          pathname: '/vulnerability/[id]',
                          query: { id: data.id },
                        })
                      }}
                    >
                      <DataSeverity>
                        {data.vuln && (
                          <LabelSeverity
                            score={data.vuln.cvss_base_score}
                            severity={data.vuln.cvss_severity_ja}
                            severityId={data.vuln.cvss_severity_id}
                            small
                          />
                        )}
                      </DataSeverity>
                      <DataKind>公開</DataKind>
                      <DataId>{data.vuln_id}</DataId>
                      <DataTitle>
                        {data.vuln ? (
                          <p>{data.vuln.jvn_title}</p>
                        ) : (
                          <p>
                            SQL Server Reporting Services
                            におけるセキュリティ機能を回避される脆弱性
                          </p>
                        )}
                      </DataTitle>
                      <DataServer>
                        <DataServerProjectName>
                          {data.server.project.name}
                        </DataServerProjectName>
                        <DataServerName>{data.server.name}</DataServerName>
                      </DataServer>
                      <DataDate>
                        {data.created_at.replaceAll('-', '/')}
                      </DataDate>
                      <DataAssignee>
                        {data.assignee ? (
                          <>
                            <IconImage
                              src={data.assignee.profile_image}
                              size={32}
                            />
                            <DataAssigneeName>
                              {data.assignee.name}
                            </DataAssigneeName>
                          </>
                        ) : (
                          <>
                            <div></div>
                            <DataAssigneeName>未設定</DataAssigneeName>
                          </>
                        )}
                      </DataAssignee>
                      <DataStatus>
                        {data.status === 1 ? (
                          <Icon.StatusBacklog />
                        ) : data.status === 9 ? (
                          <Icon.StatusDone />
                        ) : data.status === 3 ? (
                          <Icon.StatusClosed />
                        ) : (
                          data.status === 2 && <Icon.StatusProgress />
                        )}

                        <div>{data.status_name}</div>
                      </DataStatus>
                    </DataListItem>
                  </StyledListItem>
                ))}
              </>
            ) : (
              <NothingText>
                検索条件に合う脆弱性はありませんでした。
              </NothingText>
            )}
          </>
        ) : (
          <LoadingIcon />
        )}
      </StyledList>

      <ListFooter>
        <PerPageList>
          <PerPageListShow>
            全 {props.totalCount} 件中
            <PageCurrentNumber>{Number(offset) + 1}</PageCurrentNumber>〜
            {props.totalCount > Number(offset) + Number(perPage) ? (
              <PageCurrentNumber>
                {Number(offset) + Number(perPage)}
              </PageCurrentNumber>
            ) : (
              <PageCurrentNumber>{props.totalCount}</PageCurrentNumber>
            )}
            件を表示
          </PerPageListShow>
          <StyledSelect
            defaultData={initialSelect}
            data={perPageSelectData}
            top
            handleClick={handleChangePerPage}
          />
        </PerPageList>

        <StyledReactPaginate
          previousLabel={<Icon.ChevronLeft color={Color.TEXT.GRAY} />}
          nextLabel={<Icon.ChevronRight color={Color.TEXT.GRAY} />}
          breakLabel={'...'}
          pageCount={pageCount}
          marginPagesDisplayed={2}
          pageRangeDisplayed={2}
          forcePage={currentPage}
          onPageChange={handlePageChange}
        />
      </ListFooter>
    </Wrap>
  )
}

const Wrap = styled.div`
  min-width: 1056px;
  font-size: 14px;
`
const StyledList = styled(List)<{ height?: number }>`
  height: calc(100vh - ${({ height }) => height && height}px);
  margin: 0 0 0 -16px;
  padding: 4px 16px;
  overflow-y: scroll;
  transition: height 0.3s ease-in-out;
  &::-webkit-scrollbar {
    //display: none;
  }
`
const ListFooter = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px 0 0;
`
const PerPageList = styled.div`
  display: flex;
  align-items: center;
`
const PerPageListShow = styled.div`
  display: flex;
  align-items: center;
`
const PageCurrentNumber = styled.div`
  margin: 0 0.4em;
`
const StyledSelect = styled(Select)`
  margin-left: 16px;

  > div {
    width: 96px;
  }
`

const StyledReactPaginate = styled(ReactPaginate)`
  display: flex;
  font-size: 16px;

  li {
    margin-left: 8px;
  }

  .selected {
    a {
      background: ${Color.PRIMARY._500};
      color: ${Color.TEXT.WHITE};
      cursor: pointer;
    }
  }

  a {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    border-radius: 20px;
    color: ${Color.TEXT.GRAY};
    font-weight: bold;
    line-height: 1;
    cursor: pointer;
    transition: all 0.2s;

    &:hover {
      background: ${Color.COMPONENT.WHITE_HOVER};
      color: ${Color.TEXT.GRAY};
      cursor: pointer;
      transition: all 0.2s;
    }
  }
`
const StyledListItem = styled(ListItem)`
  position: relative;
  display: grid;
  grid-template-columns: 40px 1fr;
  border-radius: 8px;
  line-height: 1.71;
  overflow: hidden;

  > * {
    margin-right: 16px;
  }
`
const Unread = styled.div`
  position: absolute;
  top: -17px;
  left: -17px;
  width: 34px;
  height: 34px;
  background: ${Color.COMPONENT.NOTICE};
  transform: rotate(45deg);
`
const DataListItem = styled.div`
  display: grid !important;
  grid-template-columns: 72px 48px 128px 1fr 130px minmax(96px, auto) 136px 96px;
  height: 100%;
  margin: 0;
  cursor: pointer;

  > * {
    display: flex;
    align-items: center;
    margin-right: 16px;
  }
`
const DataCheckbox = styled.div``
const DataSeverity = styled.div``
const DataKind = styled.div`
  white-space: nowrap;
`
const DataId = styled.div`
  white-space: nowrap;
`
const DataTitle = styled.div`
  min-width: 246px;

  p {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    text-overflow: ellipsis;
    overflow: hidden;
    font-size: 14px;
  }
`
const DataServer = styled.div`
  display: flex;
  align-items: flex-start !important;
  flex-direction: column;
`
const DataServerProjectName = styled.div``
const DataServerName = styled.div`
  font-size: 12px;
  color: #929daf;
`
const DataDate = styled.div`
  max-width: 140px;
`
const DataAssignee = styled.div`
  div:first-of-type {
    width: 32px;
    min-width: 32px;
    height: 32px;
    margin-right: 8px;
  }
`
const DataAssigneeName = styled.div``
const DataStatus = styled.div`
  span {
    display: inline-block;
    margin-right: 8px;
  }
`
const NothingText = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  line-height: 1.71;
  text-align: center;
`

export default VulnerabilityList
