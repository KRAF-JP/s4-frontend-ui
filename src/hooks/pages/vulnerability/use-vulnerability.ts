import { useContext, useEffect, useState } from 'react'
import useSWR from 'swr'
import { apiClient, fetcher } from '../../api-client'
import GlobalContext from '../../../store/context'
import { useRouter } from 'next/router'
import { vulnerabilityDetailInitialState } from '../../../types/vulnerability-detail'
import type { vulnerabilityState } from '../../../types/vulnerability-detail'
import { useErrorHandle } from '../../use-error-handle'

export const useVulnerability = () => {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [vulnerability, setVulnerability] = useState<any>([])
  const [defaultData, setDefaultData] = useState<any>([])
  const [totalCount, setTotalCount] = useState<number>(0)
  const errorHandle = useErrorHandle()

  const fetchRequest = async (query) => {
    setIsLoading(false)

    apiClient
      .get('/issues', {
        params: query,
      })
      .then((res) => {
        setDefaultData(res.data)
        const data = res.data.map((data) => {
          return {
            ...data,
            flag: false,
          }
        })
        setVulnerability(data)
        setIsLoading(true)
        setTotalCount(Number(res.headers['x-total-count']))
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  useEffect(() => {
    if (!router.isReady) return
    fetchRequest(router.query)
  }, [router.query, router.isReady])

  return {
    vulnerability,
    setVulnerability,
    defaultData,
    isLoading,
    setIsLoading,
    totalCount,
  }
}

export const useVulnerabilitySearchItem = () => {
  const [projectList, setProjectList] = useState<any>([])
  const [serverList, setServerList] = useState<any>([])
  const [userList, setUserList] = useState<any>([])
  const [assignUserList, setAssignUserList] = useState<any>([])
  const [target, setTarget] = useState<any>()
  const [serverRequestTrigger, setServerRequestTrigger] =
    useState<boolean>(false)
  const [memberListTrigger, setMemberListTrigger] = useState<boolean>(false)
  const [projectId, setProjectId] = useState<number>(null)
  const errorHandle = useErrorHandle()

  const fetchProjectList = async () => {
    apiClient
      .get('/projects')
      .then((res) => {
        const project = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
          }
        })

        project.unshift({
          label: 'すべて',
          value: '',
        })

        setProjectList(project)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const fetchServerList = async (id: number) => {
    apiClient
      .get(`/projects/${id}/servers`, {
        params: { id: id },
      })
      .then((res) => {
        const server = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
          }
        })

        server.unshift({
          label: 'すべて',
          value: '',
        })

        setServerList(server)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const fetchUserList = async () => {
    apiClient
      .get(`/users`)
      .then((res) => {
        const users = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
            image: data.profile_image,
          }
        })

        users.unshift({
          label: 'すべて',
          value: '',
        })

        setUserList(users)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const fetchAssignUserList = async () => {
    apiClient
      .get(`/projects/${projectId}/members`)
      .then((res) => {
        const assignUsers = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
            image: data.profile_image,
          }
        })

        assignUsers.unshift({
          label: '担当者を変更',
          value: '',
        })

        setAssignUserList(assignUsers)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  useEffect(() => {
    fetchProjectList()
  }, [])

  useEffect(() => {
    fetchUserList()
  }, [])

  useEffect(() => {
    if (!serverRequestTrigger) return
    fetchServerList(target)
  }, [target, serverRequestTrigger])

  useEffect(() => {
    if (!memberListTrigger) return
    fetchAssignUserList()
    setMemberListTrigger(false)
  }, [memberListTrigger])

  return {
    projectList,
    serverList,
    userList,
    assignUserList,
    setAssignUserList,
    setTarget,
    setProjectId,
    setServerRequestTrigger,
    setMemberListTrigger,
  }
}

export const useVulnerabilityUnRead = async () => {
  const { dispatch } = useContext(GlobalContext)
  const { data, error } = useSWR('/issues/unread_count', fetcher)
  const errorHandle = useErrorHandle()

  const fetchUnreadCount = async () => {
    if (error) return errorHandle(error)

    return dispatch({
      type: 'update_vulnerability_unread',
      payload: data.count,
    })
  }

  useEffect(() => {
    if (!data) return
    fetchUnreadCount()
  }, [data])
}

export const useVulnerabilityRead = () => {
  const { state, dispatch } = useContext(GlobalContext)
  const [readItem, setReadItem] = useState<any>([])
  const [trigger, setTrigger] = useState<boolean>()
  const errorHandle = useErrorHandle()

  const readItems = async () => {
    apiClient
      .post(`/issues/read`, readItem)
      .then((res) => {
        const unreadCount =
          state.vulnerability.unread - readItem.ids.length <= 0
            ? 0
            : state.vulnerability.unread - readItem.ids.length

        dispatch({
          type: 'update_vulnerability_unread',
          payload: unreadCount,
        })

        dispatch({
          type: 'update_toaster',
          payload: {
            isShow: true,
            text: '一括変更が完了しました。',
            type: 'success',
          },
        })
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  useEffect(() => {
    if (!trigger) return
    readItems()
    setTrigger(false)
  }, [trigger])

  return {
    setReadItem,
    setTrigger,
  }
}

export const useVulnerabilityBulkChange = () => {
  const [bulkItem, setBulkItem] = useState<any>()
  const [bulkChangeTrigger, setBulkChangeTrigger] = useState<boolean>()
  const { dispatch } = useContext(GlobalContext)
  const errorHandle = useErrorHandle()

  const putBulkChangeRequest = async () => {
    apiClient
      .post(`/issues/bulk_update`, bulkItem)
      .then((res) => {
        dispatch({
          type: 'update_toaster',
          payload: {
            isShow: true,
            text: `一括変更が完了しました。`,
            type: 'success',
          },
        })
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  useEffect(() => {
    if (!bulkChangeTrigger) return
    putBulkChangeRequest()
    setBulkChangeTrigger(false)
  }, [bulkChangeTrigger])

  return {
    setBulkItem,
    setBulkChangeTrigger,
  }
}

export const useVulnerabilityDetail = () => {
  const router = useRouter()
  const { id } = router.query
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [vulnerability, setVulnerability] = useState<vulnerabilityState>(
    vulnerabilityDetailInitialState
  )
  const [vulnerabilityHistory, setVulnerabilityHistory] = useState<any>([])
  const [userList, setUserList] = useState<any>([])
  const [statusChangeData, setStatusChangeData] = useState<any>()
  const [trigger, setTrigger] = useState<boolean>(false)
  const { dispatch } = useContext(GlobalContext)
  const errorHandle = useErrorHandle()

  const fetchRequest = async () => {
    apiClient
      .get(`/issues/${Number(id)}`)
      .then((res) => {
        setVulnerability(res.data)
        setIsLoading(false)
        fetchMembersRequest(res.data.server.project_id)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const fetchMembersRequest = async (projectId: number) => {
    apiClient
      .get(`/projects/${projectId}/members`)
      .then((res) => {
        const users = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
            image: data.profile_image,
          }
        })
        setUserList(users)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const putRequest = async () => {
    apiClient
      .put(`/issues/${Number(id)}`, statusChangeData)
      .then((res) => {
        fetchHistoryRequest()
        dispatch({
          type: 'update_toaster',
          payload: {
            isShow: true,
            text: `変更が完了しました`,
            type: 'success',
          },
        })
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  const fetchHistoryRequest = async () => {
    apiClient
      .get(`/issues/${Number(id)}/history`)
      .then((res) => {
        const data = res.data.map((data) => {
          const time = new Date(data.created_at).getTime()
          const now = new Date().getTime()
          const diff = now - time
          const diffMin = Math.floor(diff / 1000 / 60)
          const hour = Math.floor(diff / 1000 / 60 / 60) % 60
          const yesterdayH = new Date(data.created_at).getHours()
          const yesterdayM = new Date(data.created_at).getMinutes()

          if (diffMin < 1) {
            return {
              ...data,
              created_at: '数秒前',
            }
          } else if (diffMin > 1 && diffMin < 60) {
            return {
              ...data,
              created_at: '数分前',
            }
          } else if (diffMin > 61 && diffMin < 1440) {
            return {
              ...data,
              created_at: `${hour}時間前`,
            }
          } else if (diffMin > 1441 && diffMin < 2880) {
            return {
              ...data,
              created_at: `昨日 ${yesterdayH}:${yesterdayM}`,
            }
          } else {
            return {
              ...data,
            }
          }
        })
        setVulnerabilityHistory(data)
      })
      .catch((error) => {
        errorHandle(error)
      })
  }

  useEffect(() => {
    if (!router.isReady) return
    setIsLoading(true)
    fetchRequest()
    fetchHistoryRequest()
  }, [router.isReady, router.query])

  useEffect(() => {
    if (!trigger) return
    putRequest()
    setTrigger(false)
  }, [trigger])

  return {
    isLoading,
    vulnerability,
    setVulnerability,
    vulnerabilityHistory,
    userList,
    statusChangeData,
    setStatusChangeData,
    setTrigger,
  }
}
