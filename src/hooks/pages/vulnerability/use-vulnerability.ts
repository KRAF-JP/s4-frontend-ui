import { useContext, useEffect, useState } from 'react'
import { apiClient } from '../../api-client'
import GlobalContext from '../../../store/context'
import { useRouter } from 'next/router'

export const useVulnerability = () => {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [vulnerability, setVulnerability] = useState<any>([])
  const [defaultData, setDefaultData] = useState<any>([])
  const [totalCount, setTotalCount] = useState<number>(0)
  const { dispatch } = useContext(GlobalContext)

  const fetchRequest = async (query) => {
    setIsLoading(false)

    apiClient
      .get('/issues', {
        params: query,
      })
      .then((res) => {
        setDefaultData(res.data)
        console.log(res.data)
        const data = res.data.map((data) => {
          return {
            ...data,
            flag: false,
          }
        })
        setVulnerability(data)
        setIsLoading(true)
        setTotalCount(Number(res.headers['x-total-count']))
      })
      .catch((error) => {
        // #TODO sentry
        console.log(error)
      })
  }

  useEffect(() => {
    if (!router.isReady) return
    fetchRequest(router.query)
  }, [router.query, router.isReady])

  return {
    vulnerability,
    setVulnerability,
    defaultData,
    isLoading,
    setIsLoading,
    totalCount,
  }
}

export const useVulnerabilitySearchItem = () => {
  const [projectList, setProjectList] = useState<any>([])
  const [serverList, setServerList] = useState<any>([])
  const [userList, setUserList] = useState<any>([])
  const [assignUserList, setAssignUserList] = useState<any>([])
  const [target, setTarget] = useState<any>()
  const [serverRequestTrigger, setServerRequestTrigger] =
    useState<boolean>(false)

  const fetchProjectList = async () => {
    apiClient
      .get('/projects')
      .then((res) => {
        const project = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
          }
        })

        project.unshift({
          label: 'すべて',
          value: '',
        })

        setProjectList(project)
      })
      .catch((error) => {
        // #TODO sentry
        console.log(error)
      })
  }

  const fetchServerList = async (id: number) => {
    apiClient
      .get(`/projects/${id}/servers`, {
        params: { id: id },
      })
      .then((res) => {
        const server = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
          }
        })

        server.unshift({
          label: 'すべて',
          value: '',
        })

        setServerList(server)
      })
      .catch((error) => {
        // #TODO sentry
        console.log(error)
      })
  }

  const fetchUserList = async () => {
    apiClient
      .get('/users')
      .then((res) => {
        const users = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
            image: data.profile_image,
          }
        })

        const assignUsers = res.data.map((data) => {
          return {
            label: data.name,
            value: data.id,
            image: data.profile_image,
          }
        })

        users.unshift({
          label: 'すべて',
          value: '',
        })

        assignUsers.unshift({
          label: '担当者を変更',
          value: '',
        })

        setUserList(users)
        setAssignUserList(assignUsers)
      })
      .catch((error) => {
        // #TODO sentry
        console.log(error)
      })
  }

  useEffect(() => {
    fetchProjectList()
  }, [])

  useEffect(() => {
    if (!serverRequestTrigger) return
    fetchServerList(target)
  }, [target, serverRequestTrigger])

  useEffect(() => {
    fetchUserList()
  }, [])

  return {
    projectList,
    serverList,
    userList,
    assignUserList,
    setTarget,
    setServerRequestTrigger,
  }
}

export const useVulnerabilityRead = () => {
  const [readItem, setReadItem] = useState<any>([])
  const [trigger, setTrigger] = useState<boolean>()

  const readItems = async () => {
    readItem.map((data) => {
      apiClient
        .post(`/issues/${data}/read`)
        .then((res) => {})
        .catch((error) => {})
    })
  }

  useEffect(() => {
    if (!trigger) return
    readItems()
    setTrigger(false)
  }, [trigger])

  return {
    setReadItem,
    setTrigger,
  }
}

export const useVulnerabilityBulkChange = () => {
  const [issueId, setIssueId] = useState<any>([])
  const [bulkItem, setBulkItem] = useState<any>()
  const [bulkChangeTrigger, setBulkChangeTrigger] = useState<boolean>()

  const putBulkChangeRequest = async () => {
    issueId.map((issueId) => {
      apiClient
        .put(`/issues/${issueId}`, bulkItem)
        .then((res) => {
          console.log(res)
        })
        .catch((error) => {})
    })
  }

  useEffect(() => {
    if (!bulkChangeTrigger) return
    putBulkChangeRequest()
    setBulkChangeTrigger(false)
  }, [bulkChangeTrigger])

  return {
    setIssueId,
    setBulkItem,
    setBulkChangeTrigger,
  }
}

export const useVulnerabilityDetail = () => {
  const router = useRouter()
  const { id } = router.query
  const [vulnerability, setVulnerability] = useState<any>({
    vuln: { jvn_title: '' },
  })
  const { dispatch } = useContext(GlobalContext)

  const fetchRequest = async (id: number) => {
    apiClient
      .get(`/issues/${id}`)
      .then((res) => {
        console.log(res.data)
        setVulnerability(res.data)
      })
      .catch((error) => {
        console.log(error)
      })
  }

  useEffect(() => {
    if (id) {
      fetchRequest(Number(id))
    }
  }, [id])

  return {
    vulnerability,
    setVulnerability,
  }
}
